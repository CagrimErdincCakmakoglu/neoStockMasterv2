<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStripLanguage.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbScale.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>